package com.zlp.sales;import java.io.InputStream;import java.net.URL;import java.net.URLConnection;import java.util.ArrayList;import org.achartengine.ChartFactory;import org.achartengine.chart.BarChart.Type;import org.achartengine.model.CategorySeries;import org.achartengine.model.XYMultipleSeriesDataset;import org.achartengine.renderer.SimpleSeriesRenderer;import org.achartengine.renderer.XYMultipleSeriesRenderer;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.graphics.Paint.Align;import android.os.AsyncTask;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.TextView;import android.widget.Toast;import com.zlp.adapter.CurDataAdapter;import com.zlp.entity.CurData;import com.zlp.entity.XmlCurDataHandler;import com.zlp.utils.AppKeys;import com.zlp.utils.NetWorkState;/** * 查看当月销售数据 *  * @author zouliping *  */public class CheckNowFragment extends Fragment {	private Context mContext;	private View mainView;	private TextView tvCheckNow;	private ArrayList<CurData> curDataList;	private XmlCurDataHandler handler;	private CurDataAdapter adapter;	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		mainView = inflater.inflate(R.layout.check_now_layout, null);		mContext = getActivity();		initData();		initViews();		return mainView;	}	/**	 * 初始化必要的数据	 */	private void initData() {		curDataList = new ArrayList<CurData>();		handler = new XmlCurDataHandler();		adapter = new CurDataAdapter(mContext, curDataList);		new getCurDataTask().execute();	}	/**	 * 获取当月数据的task	 * 	 * @author zouliping	 * 	 */	private class getCurDataTask extends AsyncTask<String, Integer, String> {		ProgressDialog dlg;		@Override		protected void onPreExecute() {			dlg = new ProgressDialog(mContext);			dlg.setProgressStyle(ProgressDialog.STYLE_SPINNER);			dlg.show();		}		@Override		protected String doInBackground(String... arg0) {			if (!NetWorkState.isNetworkAvailable(mContext)) { // 判断网络的连接				return null;			}			try {				URL url = new URL(AppKeys.GET_CUR_DATA_URL);				URLConnection connection = url.openConnection();				connection.connect();				InputStream is = connection.getInputStream();				// InputStream is =				// Utils.str2InputStream("<?xml version="1.0" encoding="utf-8"?><DATA><item><location>harbin</location><pname>stock</pname><count>20</count></item><item><location>xiamen</location><pname>lock</pname><count>26</count></item><item><location>fuzhou</location><pname>barrel</pname><count>16</count></item><item><location>daqing</location><pname>lock</pname><count>15</count></item></DATA>");				curDataList = handler.getCurData(is);			} catch (Exception e) {				e.printStackTrace();			}			return null;		}		@Override		protected void onPostExecute(String result) {			if (curDataList.size() == 0) {				Toast.makeText(mContext, "no current data", Toast.LENGTH_SHORT)						.show();			} else {				adapter.notifyDataSetChanged();			}		}	}	/**	 * 初始化必要的View	 */	private void initViews() {		tvCheckNow = (TextView) mainView.findViewById(R.id.check_now_tv);		tvCheckNow.setOnClickListener(listener);	}	private OnClickListener listener = new OnClickListener() {		@Override		public void onClick(View v) {			switch (v.getId()) {			case R.id.check_now_tv:				XYMultipleSeriesRenderer renderer = getRenderer();				Intent intent = ChartFactory.getBarChartIntent(mContext,						getDataset(), renderer, Type.DEFAULT);				startActivity(intent);				break;			default:				break;			}		}	};	/**	 * get XYMultipleSeriesDataset	 * 	 * @return	 */	private XYMultipleSeriesDataset getDataset() {		XYMultipleSeriesDataset dataset = new XYMultipleSeriesDataset();		CategorySeries series = new CategorySeries("当月销售数据");		for (int i = 1; i < 4; i++) {			series.add(i * 8);		}		dataset.addSeries(series.toXYSeries());		return dataset;	}	/**	 * get XYMultipleSeriesRenderer	 * 	 * @return	 */	private XYMultipleSeriesRenderer getRenderer() {		XYMultipleSeriesRenderer renderer = new XYMultipleSeriesRenderer();		SimpleSeriesRenderer ssr = new SimpleSeriesRenderer();		ssr.setColor(Color.BLUE);		renderer.addSeriesRenderer(ssr);		setChartSettings(renderer);		return renderer;	}	/**	 * 设置图的属性	 * 	 * @param renderer	 */	private void setChartSettings(XYMultipleSeriesRenderer renderer) {		renderer.setChartTitle("当月销售数据一览");		renderer.setXTitle("x 种类");		renderer.setYTitle("y 个数");		renderer.setXLabelsAlign(Align.RIGHT); // 设置x轴刻度的数值显示在x轴的下方		renderer.setYLabelsAlign(Align.RIGHT); // 设置y轴刻度的数值显示在y轴的左方		renderer.setXAxisMin(0.5);		renderer.setXAxisMax(3);		renderer.setYAxisMin(1);		renderer.setYAxisMax(80);		renderer.setZoomButtonsVisible(true); // 设置显示缩放按钮		renderer.setPanEnabled(true, false); // 允许左右拖动,但不允许上下拖动		renderer.setBarSpacing(0.5f); // 柱子间的宽度		// renderer.setBarWidth(12); // 柱子的宽度		renderer.getSeriesRendererAt(0).setDisplayChartValues(true); // 设置柱子上显示数量		renderer.setChartTitleTextSize(25); // 设置数量的字体大小		renderer.setLabelsTextSize(20); // 坐标字体大小		renderer.setLegendTextSize(20); // 设置图例字体大小		renderer.setAxisTitleTextSize(20); // 设置坐标标题字体大小		renderer.setXLabels(3); // 设置X轴的近似坐标数		renderer.addXTextLabel(1, "Locks");		renderer.addXTextLabel(2, "Stocks");		renderer.addXTextLabel(3, "Barrels");	}}